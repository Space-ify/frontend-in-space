{"ast":null,"code":"var _jsxFileName = \"/Users/mitchellkimbell/Desktop/frontend-in-space/src/App.js\";\nimport React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport planetData from \"./planetData\";\nimport \"./styles.css\";\nimport Header from \"./components/Header/Header\";\nimport Bottomer from \"./components/Bottomer/Bottomer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      class: \"canvas-container\",\n      camera: {\n        position: [0, 20, 25],\n        fov: 90\n      },\n      children: [/*#__PURE__*/_jsxDEV(Sun, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), planetData.map(planet => /*#__PURE__*/_jsxDEV(Planet, {\n        planet: planet\n      }, planet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Lights, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bottomer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nfunction Sun() {\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [2.5, 32, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: \"#E1DC59\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Sun;\nfunction Planet(_ref) {\n  let {\n    planet: {\n      color,\n      xRadius,\n      zRadius,\n      size\n    }\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: [xRadius, 0, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [size, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Ecliptic, {\n      xRadius: xRadius,\n      zRadius: zRadius\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c3 = Planet;\nfunction Lights() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [0, 0, 0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// function Ecliptic({ xRadius = 1, zRadius = 1 }) {\n//   const points = [];\n//   for (let index = 0; index < 64; index++) {\n//     const angle = (index / 64) * 2 * Math.PI;\n//     const x = xRadius * Math.cos(angle);\n//     const z = zRadius * Math.sin(angle);\n//     points.push(new THREE.Vector3(x, 0, z));\n//   }\n\n//   points.push(points[0]);\n\n//   const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n//   return (\n//     <line geometry={lineGeometry}>\n//       <lineBasicMaterial attach=\"material\" color=\"#BFBBDA\" linewidth={10} />\n//     </line>\n//   );\n// }\n_c4 = Lights;\nfunction Ecliptic(_ref2) {\n  let {\n    xRadius = 1,\n    zRadius = 1\n  } = _ref2;\n  // Using only one radius parameter for a circle\n  const points = [];\n  for (let index = 0; index < 64; index++) {\n    const angle = index / 64 * 2 * Math.PI;\n    const x = xRadius * Math.cos(angle); // Use xRadius for both x and z\n    const z = zRadius * Math.sin(angle); // Use xRadius for both x and z\n    points.push(new THREE.Vector3(x, 0, z));\n  }\n  points.push(points[0]); // Close the loop\n\n  const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n  return /*#__PURE__*/_jsxDEV(\"line\", {\n    geometry: lineGeometry,\n    children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n      attach: \"material\",\n      color: \"#BFBBDA\",\n      linewidth: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_c5 = Ecliptic;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Sun\");\n$RefreshReg$(_c3, \"Planet\");\n$RefreshReg$(_c4, \"Lights\");\n$RefreshReg$(_c5, \"Ecliptic\");","map":{"version":3,"names":["React","Canvas","OrbitControls","THREE","planetData","Header","Bottomer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","fileName","_jsxFileName","lineNumber","columnNumber","class","camera","position","fov","Sun","map","planet","Planet","id","Lights","_c","args","color","_c2","_ref","xRadius","zRadius","size","Ecliptic","_c3","_c4","_ref2","points","index","angle","Math","PI","x","cos","z","sin","push","Vector3","lineGeometry","BufferGeometry","setFromPoints","geometry","attach","linewidth","_c5","$RefreshReg$"],"sources":["/Users/mitchellkimbell/Desktop/frontend-in-space/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport planetData from \"./planetData\";\nimport \"./styles.css\";\nimport Header from \"./components/Header/Header\";\nimport Bottomer from \"./components/Bottomer/Bottomer\";\n\nexport default function App() {\n  return (\n    <>\n      <div></div>\n      <Header></Header>\n      <Canvas class=\"canvas-container\" camera={{ position: [0, 20, 25], fov: 90 }}>\n        <Sun />\n        {planetData.map((planet) => (\n          <Planet planet={planet} key={planet.id} />\n        ))}\n        <Lights />\n        <OrbitControls />\n      </Canvas>\n      <Bottomer></Bottomer>\n    </>\n  );\n}\nfunction Sun() {\n  return (\n    <mesh>\n      <sphereGeometry args={[2.5, 32, 32]} />\n      <meshStandardMaterial color=\"#E1DC59\" />\n    </mesh>\n  );\n}\nfunction Planet({ planet: { color, xRadius, zRadius, size } }) {\n  return (\n    <>\n      <mesh position={[xRadius, 0, 0]}>\n        <sphereGeometry args={[size, 32, 32]} />\n        <meshStandardMaterial color={color} />\n      </mesh>\n      <Ecliptic xRadius={xRadius} zRadius={zRadius} />\n    </>\n  );\n}\n\nfunction Lights() {\n  return (\n    <>\n      <ambientLight />\n      <pointLight position={[0, 0, 0]} />\n    </>\n  );\n}\n\n// function Ecliptic({ xRadius = 1, zRadius = 1 }) {\n//   const points = [];\n//   for (let index = 0; index < 64; index++) {\n//     const angle = (index / 64) * 2 * Math.PI;\n//     const x = xRadius * Math.cos(angle);\n//     const z = zRadius * Math.sin(angle);\n//     points.push(new THREE.Vector3(x, 0, z));\n//   }\n\n//   points.push(points[0]);\n\n//   const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n//   return (\n//     <line geometry={lineGeometry}>\n//       <lineBasicMaterial attach=\"material\" color=\"#BFBBDA\" linewidth={10} />\n//     </line>\n//   );\n// }\n\nfunction Ecliptic({ xRadius = 1, zRadius = 1 }) {\n  // Using only one radius parameter for a circle\n  const points = [];\n  for (let index = 0; index < 64; index++) {\n    const angle = (index / 64) * 2 * Math.PI;\n    const x = xRadius * Math.cos(angle); // Use xRadius for both x and z\n    const z = zRadius * Math.sin(angle); // Use xRadius for both x and z\n    points.push(new THREE.Vector3(x, 0, z));\n  }\n\n  points.push(points[0]); // Close the loop\n\n  const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n  return (\n    <line geometry={lineGeometry}>\n      <lineBasicMaterial attach=\"material\" color=\"#BFBBDA\" linewidth={10} />\n    </line>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
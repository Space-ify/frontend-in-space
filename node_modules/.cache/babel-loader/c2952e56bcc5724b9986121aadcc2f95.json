{"ast":null,"code":"import { forwardRef, useRef, useState, useImperativeHandle } from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\nconst CameraShake = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    intensity = 1,\n    decay,\n    decayRate = 0.65,\n    maxYaw = 0.1,\n    maxPitch = 0.1,\n    maxRoll = 0.1,\n    yawFrequency = 1,\n    pitchFrequency = 1,\n    rollFrequency = 1,\n    additive\n  } = _ref;\n  const camera = useThree(state => state.camera);\n  const intensityRef = useRef(intensity);\n  const [yawNoise] = useState(() => new SimplexNoise());\n  const [pitchNoise] = useState(() => new SimplexNoise());\n  const [rollNoise] = useState(() => new SimplexNoise());\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n  useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  useFrame((_ref2, delta) => {\n    let {\n      clock\n    } = _ref2;\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n    if (additive) {\n      camera.rotation.x += pitch;\n      camera.rotation.y += yaw;\n      camera.rotation.z += roll;\n    } else {\n      camera.rotation.set(pitch, yaw, roll);\n    }\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":{"version":3,"names":["forwardRef","useRef","useState","useImperativeHandle","useThree","useFrame","SimplexNoise","CameraShake","_ref","ref","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","additive","camera","state","intensityRef","yawNoise","pitchNoise","rollNoise","constrainIntensity","current","getIntensity","setIntensity","val","_ref2","delta","clock","shake","Math","pow","yaw","noise","elapsedTime","pitch","roll","rotation","x","y","z","set"],"sources":["/Users/mitchellkimbell/Desktop/frontend-in-space/node_modules/@react-three/drei/core/CameraShake.js"],"sourcesContent":["import { forwardRef, useRef, useState, useImperativeHandle } from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\n\nconst CameraShake = /*#__PURE__*/forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 1,\n  pitchFrequency = 1,\n  rollFrequency = 1,\n  additive\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const intensityRef = useRef(intensity);\n  const [yawNoise] = useState(() => new SimplexNoise());\n  const [pitchNoise] = useState(() => new SimplexNoise());\n  const [rollNoise] = useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  useFrame(({\n    clock\n  }, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n\n    if (additive) {\n      camera.rotation.x += pitch;\n      camera.rotation.y += yaw;\n      camera.rotation.z += roll;\n    } else {\n      camera.rotation.set(pitch, yaw, roll);\n    }\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
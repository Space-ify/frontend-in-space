{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(parameters);\n    _defineProperty(this, \"_debug\", {\n      value: 0\n    });\n    _defineProperty(this, \"_tDepth\", {\n      value: null\n    });\n    _defineProperty(this, \"_distortionMap\", {\n      value: null\n    });\n    _defineProperty(this, \"_tDiffuse\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_0\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_1\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_2\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_3\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_4\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_5\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_6\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_7\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_res_0\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_res_1\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_res_2\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_res_3\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_res_4\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_res_5\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_res_6\", {\n      value: null\n    });\n    _defineProperty(this, \"_u_mipmap_res_7\", {\n      value: null\n    });\n    _defineProperty(this, \"_textureMatrix\", {\n      value: null\n    });\n    _defineProperty(this, \"_mirror\", {\n      value: 0.0\n    });\n    _defineProperty(this, \"_mixBlur\", {\n      value: 0.0\n    });\n    _defineProperty(this, \"_blurStrength\", {\n      value: 0.5\n    });\n    _defineProperty(this, \"_minDepthThreshold\", {\n      value: 0.9\n    });\n    _defineProperty(this, \"_maxDepthThreshold\", {\n      value: 1\n    });\n    _defineProperty(this, \"_depthScale\", {\n      value: 0\n    });\n    _defineProperty(this, \"_depthToBlurRatioBias\", {\n      value: 0.25\n    });\n    _defineProperty(this, \"_distortion\", {\n      value: 1\n    });\n    this.setValues(parameters);\n  }\n  onBeforeCompile(shader) {\n    var _shader$defines;\n    if (!((_shader$defines = shader.defines) == null ? void 0 : _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \" + shader.vertexShader;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n    shader.fragmentShader = \"\\n        uniform int debug;\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform sampler2D u_mipmap_0;\\n        uniform sampler2D u_mipmap_1;\\n        uniform sampler2D u_mipmap_2;\\n        uniform sampler2D u_mipmap_3;\\n        uniform sampler2D u_mipmap_4;\\n        uniform sampler2D u_mipmap_5;\\n        uniform sampler2D u_mipmap_6;\\n        uniform sampler2D u_mipmap_7;\\n        uniform vec2 u_mipmap_res_0;\\n        uniform vec2 u_mipmap_res_1;\\n        uniform vec2 u_mipmap_res_2;\\n        uniform vec2 u_mipmap_res_3;\\n        uniform vec2 u_mipmap_res_4;\\n        uniform vec2 u_mipmap_res_5;\\n        uniform vec2 u_mipmap_res_6;\\n        uniform vec2 u_mipmap_res_7;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;  \\n        \\n        // from http://www.java-gaming.org/index.php?topic=35123.0\\n        vec4 cubic( float v ) {\\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\\n          vec4 s = n * n * n;\\n          float x = s.x;\\n          float y = s.y - 4.0 * s.x;\\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\\n          float w = 6.0 - x - y - z;\\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\\n        }\\n        \\n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\\n          vec2 invTexSize = 1.0 / texSize;\\n          texCoords = texCoords * texSize - 0.5;\\n          vec2 fxy = fract( texCoords );\\n          texCoords -= fxy;\\n\\n          vec4 xcubic = cubic( fxy.x );\\n          vec4 ycubic = cubic( fxy.y );\\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\\n\\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\\n          offset *= invTexSize.xxyy;\\n        \\n          vec4 sample0 = texture2D( sampler, offset.xz);\\n          vec4 sample1 = texture2D( sampler, offset.yz);\\n          vec4 sample2 = texture2D( sampler, offset.xw);\\n          vec4 sample3 = texture2D( sampler, offset.yw);\\n        \\n          float sx = s.x / ( s.x + s.y );\\n          float sy = s.z / ( s.z + s.w );\\n\\n          return mix(\\n            mix(\\n              sample3,\\n              sample2,\\n              sx\\n            ),\\n            mix(\\n              sample1,\\n              sample0,\\n              sx\\n            ),\\n            sy\\n          );\\n        }\\n\\n\\n        \" + shader.fragmentShader;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n    \\n      float depthFactor = 1.0;\\n      float distortionFactor = 0.0;\\n      vec3 my_normal = vec3(0.0);\\n      float reflectorRoughnessFactor = roughness;\\n      vec3 coord = my_vUv.xyz / my_vUv.w;\\n\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      #ifdef USE_NORMALMAP\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\\n      #endif\\n\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\\n      proj_vUv.x += distortionFactor;\\n      proj_vUv.y += distortionFactor;\\n      \\n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2D(tDepth, proj_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\\n      #endif\\n\\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\\n      vec4 mixedColor;\\n\\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\\n      if (_lod < 1.) {\\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        mixedColor = mix(one, two, _lod);\\n      } else if (_lod < 2.) {\\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        mixedColor = mix(one, two, _lod - 1.0);\\n      } else if (_lod < 3.) {\\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        mixedColor = mix(one, two, _lod - 2.0);\\n      } else if (_lod < 4.) {\\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        mixedColor = mix(one, two, _lod - 3.0);\\n      } else if (_lod < 5.) {\\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        mixedColor = mix(one, two, _lod - 4.0);\\n      } else if (_lod < 6.) {\\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        mixedColor = mix(one, two, _lod - 5.0);\\n      } else if (_lod < 7.) {\\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, two, _lod - 6.0);\\n      } else {\\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, baseColor, _lod - 7.0);\\n      }\\n\\n      mixedColor.rgb *= depthFactor;\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \\n      diffuseColor = sRGBToLinear(diffuseColor);\\n\\n      if (debug == 1) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\n      }\\n      if (debug == 2) {\\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\\n      }\\n      if (debug == 3) {\\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\\n      }\\n      if (debug == 4) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\\n      }\\n      \");\n  }\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n  get tDepth() {\n    return this._tDepth.value;\n  }\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n  get mirror() {\n    return this._mirror.value;\n  }\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n  get depthScale() {\n    return this._depthScale.value;\n  }\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n  get debug() {\n    return this._debug.value;\n  }\n  set debug(v) {\n    this._debug.value = v;\n  }\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n  get distortion() {\n    return this._distortion.value;\n  }\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n}\nexport { MeshReflectorMaterial };","map":{"version":3,"names":["MeshStandardMaterial","_defineProperty","MeshReflectorMaterial","constructor","parameters","arguments","length","undefined","value","setValues","onBeforeCompile","shader","_shader$defines","defines","USE_UV","uniforms","debug","_debug","tDiffuse","_tDiffuse","tDepth","_tDepth","distortionMap","_distortionMap","u_mipmap_0","_u_mipmap_0","u_mipmap_1","_u_mipmap_1","u_mipmap_2","_u_mipmap_2","u_mipmap_3","_u_mipmap_3","u_mipmap_4","_u_mipmap_4","u_mipmap_5","_u_mipmap_5","u_mipmap_6","_u_mipmap_6","u_mipmap_7","_u_mipmap_7","u_mipmap_res_0","_u_mipmap_res_0","u_mipmap_res_1","_u_mipmap_res_1","u_mipmap_res_2","_u_mipmap_res_2","u_mipmap_res_3","_u_mipmap_res_3","u_mipmap_res_4","_u_mipmap_res_4","u_mipmap_res_5","_u_mipmap_res_5","u_mipmap_res_6","_u_mipmap_res_6","u_mipmap_res_7","_u_mipmap_res_7","textureMatrix","_textureMatrix","mirror","_mirror","mixBlur","_mixBlur","mixStrength","_blurStrength","minDepthThreshold","_minDepthThreshold","maxDepthThreshold","_maxDepthThreshold","depthScale","_depthScale","depthToBlurRatioBias","_depthToBlurRatioBias","distortion","_distortion","vertexShader","replace","fragmentShader","v"],"sources":["/Users/mitchellkimbell/Desktop/space-frontend/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"sourcesContent":["import { MeshStandardMaterial } from 'three';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n\n    _defineProperty(this, \"_debug\", {\n      value: 0\n    });\n\n    _defineProperty(this, \"_tDepth\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_distortionMap\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_tDiffuse\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_0\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_1\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_2\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_3\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_4\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_5\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_6\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_7\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_0\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_1\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_2\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_3\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_4\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_5\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_6\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_7\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_textureMatrix\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_mirror\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_mixBlur\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_blurStrength\", {\n      value: 0.5\n    });\n\n    _defineProperty(this, \"_minDepthThreshold\", {\n      value: 0.9\n    });\n\n    _defineProperty(this, \"_maxDepthThreshold\", {\n      value: 1\n    });\n\n    _defineProperty(this, \"_depthScale\", {\n      value: 0\n    });\n\n    _defineProperty(this, \"_depthToBlurRatioBias\", {\n      value: 0.25\n    });\n\n    _defineProperty(this, \"_distortion\", {\n      value: 1\n    });\n\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) == null ? void 0 : _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \" + shader.vertexShader;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n    shader.fragmentShader = \"\\n        uniform int debug;\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform sampler2D u_mipmap_0;\\n        uniform sampler2D u_mipmap_1;\\n        uniform sampler2D u_mipmap_2;\\n        uniform sampler2D u_mipmap_3;\\n        uniform sampler2D u_mipmap_4;\\n        uniform sampler2D u_mipmap_5;\\n        uniform sampler2D u_mipmap_6;\\n        uniform sampler2D u_mipmap_7;\\n        uniform vec2 u_mipmap_res_0;\\n        uniform vec2 u_mipmap_res_1;\\n        uniform vec2 u_mipmap_res_2;\\n        uniform vec2 u_mipmap_res_3;\\n        uniform vec2 u_mipmap_res_4;\\n        uniform vec2 u_mipmap_res_5;\\n        uniform vec2 u_mipmap_res_6;\\n        uniform vec2 u_mipmap_res_7;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;  \\n        \\n        // from http://www.java-gaming.org/index.php?topic=35123.0\\n        vec4 cubic( float v ) {\\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\\n          vec4 s = n * n * n;\\n          float x = s.x;\\n          float y = s.y - 4.0 * s.x;\\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\\n          float w = 6.0 - x - y - z;\\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\\n        }\\n        \\n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\\n          vec2 invTexSize = 1.0 / texSize;\\n          texCoords = texCoords * texSize - 0.5;\\n          vec2 fxy = fract( texCoords );\\n          texCoords -= fxy;\\n\\n          vec4 xcubic = cubic( fxy.x );\\n          vec4 ycubic = cubic( fxy.y );\\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\\n\\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\\n          offset *= invTexSize.xxyy;\\n        \\n          vec4 sample0 = texture2D( sampler, offset.xz);\\n          vec4 sample1 = texture2D( sampler, offset.yz);\\n          vec4 sample2 = texture2D( sampler, offset.xw);\\n          vec4 sample3 = texture2D( sampler, offset.yw);\\n        \\n          float sx = s.x / ( s.x + s.y );\\n          float sy = s.z / ( s.z + s.w );\\n\\n          return mix(\\n            mix(\\n              sample3,\\n              sample2,\\n              sx\\n            ),\\n            mix(\\n              sample1,\\n              sample0,\\n              sx\\n            ),\\n            sy\\n          );\\n        }\\n\\n\\n        \" + shader.fragmentShader;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n    \\n      float depthFactor = 1.0;\\n      float distortionFactor = 0.0;\\n      vec3 my_normal = vec3(0.0);\\n      float reflectorRoughnessFactor = roughness;\\n      vec3 coord = my_vUv.xyz / my_vUv.w;\\n\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      #ifdef USE_NORMALMAP\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\\n      #endif\\n\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\\n      proj_vUv.x += distortionFactor;\\n      proj_vUv.y += distortionFactor;\\n      \\n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2D(tDepth, proj_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\\n      #endif\\n\\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\\n      vec4 mixedColor;\\n\\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\\n      if (_lod < 1.) {\\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        mixedColor = mix(one, two, _lod);\\n      } else if (_lod < 2.) {\\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        mixedColor = mix(one, two, _lod - 1.0);\\n      } else if (_lod < 3.) {\\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        mixedColor = mix(one, two, _lod - 2.0);\\n      } else if (_lod < 4.) {\\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        mixedColor = mix(one, two, _lod - 3.0);\\n      } else if (_lod < 5.) {\\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        mixedColor = mix(one, two, _lod - 4.0);\\n      } else if (_lod < 6.) {\\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        mixedColor = mix(one, two, _lod - 5.0);\\n      } else if (_lod < 7.) {\\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, two, _lod - 6.0);\\n      } else {\\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, baseColor, _lod - 7.0);\\n      }\\n\\n      mixedColor.rgb *= depthFactor;\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \\n      diffuseColor = sRGBToLinear(diffuseColor);\\n\\n      if (debug == 1) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\n      }\\n      if (debug == 2) {\\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\\n      }\\n      if (debug == 3) {\\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\\n      }\\n      if (debug == 4) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\\n      }\\n      \");\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
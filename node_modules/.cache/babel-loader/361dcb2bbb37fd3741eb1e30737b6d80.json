{"ast":null,"code":"var _jsxFileName = \"/Users/mitchellkimbell/Desktop/frontend-in-space/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nZ;\nconst handleSearch = async spotifyLink => {\n  console.log(\"handle search called\");\n  try {\n    const response = await fetch(\"http://localhost:8000/spotify/test\");\n    console.log(\"response: \", response);\n    setPlanetData(response);\n    console.log(\"State Planet Variable\", {\n      planetData\n    });\n    const data = await response.json(); // Parse JSON response into JavaScript object\n    console.log(data); // Log the response data or set it to state\n    // Process your response data here\n  } catch (error) {\n    console.error(\"Error fetching data: \", error);\n    // Handle error here\n  }\n};\nfunction Sun() {\n  _s();\n  const texture = useLoader(THREE.TextureLoader, sunTexture);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      args: [2.5, 32, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      map: texture\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(Sun, \"DPn9Ts0h3TXc07M7VbzN9xij6Hs=\", true);\n_c = Sun;\nfunction Planet(_ref) {\n  _s2();\n  let {\n    planet: {\n      color,\n      xRadius,\n      zRadius,\n      size,\n      speed,\n      offset,\n      rotationSpeed,\n      textureMap\n    }\n  } = _ref;\n  const planetRef = React.useRef();\n  const texture = useLoader(THREE.TextureLoader, textureMap);\n  useFrame(_ref2 => {\n    let {\n      clock\n    } = _ref2;\n    const t = clock.getElapsedTime() * speed + offset;\n    const x = xRadius * Math.sin(t);\n    const z = zRadius * Math.cos(t);\n    planetRef.current.position.x = x;\n    planetRef.current.position.z = z;\n    planetRef.current.rotation.y += rotationSpeed;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"mesh\", {\n      ref: planetRef,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [size, 32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        map: texture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Ecliptic, {\n      xRadius: xRadius,\n      zRadius: zRadius\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s2(Planet, \"QyPtIYh8FYySgLRhOyqIJN7/whw=\", true);\n_c2 = Planet;\nfunction Lights() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [0, 0, 0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// function Ecliptic({ xRadius = 1, zRadius = 1 }) {\n//   const points = [];\n//   for (let index = 0; index < 64; index++) {\n//     const angle = (index / 64) * 2 * Math.PI;\n//     const x = xRadius * Math.cos(angle);\n//     const z = zRadius * Math.sin(angle);\n//     points.push(new THREE.Vector3(x, 0, z));\n//   }\n\n//   points.push(points[0]);\n\n//   const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n//   return (\n//     <line geometry={lineGeometry}>\n//       <lineBasicMaterial attach=\"material\" color=\"#BFBBDA\" linewidth={10} />\n//     </line>\n//   );\n// }\n_c3 = Lights;\nfunction Ecliptic(_ref3) {\n  let {\n    xRadius = 1,\n    zRadius = 1\n  } = _ref3;\n  // Using only one radius parameter for a circle\n  const points = [];\n  for (let index = 0; index < 64; index++) {\n    const angle = index / 64 * 2 * Math.PI;\n    const x = xRadius * Math.cos(angle); // Use xRadius for both x and z\n    const z = zRadius * Math.sin(angle); // Use xRadius for both x and z\n    points.push(new THREE.Vector3(x, 0, z));\n  }\n  points.push(points[0]); // Close the loop\n\n  const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n  return /*#__PURE__*/_jsxDEV(\"line\", {\n    geometry: lineGeometry,\n    children: /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n      attach: \"material\",\n      color: \"#393e46\",\n      linewidth: 10\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_c4 = Ecliptic;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Sun\");\n$RefreshReg$(_c2, \"Planet\");\n$RefreshReg$(_c3, \"Lights\");\n$RefreshReg$(_c4, \"Ecliptic\");","map":{"version":3,"names":["Z","handleSearch","spotifyLink","console","log","response","fetch","setPlanetData","planetData","data","json","error","Sun","_s","texture","useLoader","THREE","TextureLoader","sunTexture","_jsxDEV","children","args","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","Planet","_ref","_s2","planet","color","xRadius","zRadius","size","speed","offset","rotationSpeed","textureMap","planetRef","React","useRef","useFrame","_ref2","clock","t","getElapsedTime","x","Math","sin","z","cos","current","position","rotation","y","_Fragment","ref","Ecliptic","_c2","Lights","_c3","_ref3","points","index","angle","PI","push","Vector3","lineGeometry","BufferGeometry","setFromPoints","geometry","attach","linewidth","_c4","$RefreshReg$"],"sources":["/Users/mitchellkimbell/Desktop/frontend-in-space/src/App.js"],"sourcesContent":["Z\n\nconst handleSearch = async (spotifyLink) => {\n  console.log(\"handle search called\");\n\n  try {\n    const response = await fetch(`http://localhost:8000/spotify/test`);\n    console.log(\"response: \", response);\n    setPlanetData(response);\n    console.log(\"State Planet Variable\", { planetData });\n    const data = await response.json(); // Parse JSON response into JavaScript object\n    console.log(data); // Log the response data or set it to state\n    // Process your response data here\n  } catch (error) {\n    console.error(\"Error fetching data: \", error);\n    // Handle error here\n  }\n};\n\nfunction Sun() {\n  const texture = useLoader(THREE.TextureLoader, sunTexture);\n  return (\n    <mesh>\n      <sphereGeometry args={[2.5, 32, 32]} />\n      <meshStandardMaterial map={texture} />\n    </mesh>\n  );\n}\nfunction Planet({\n  planet: {\n    color,\n    xRadius,\n    zRadius,\n    size,\n    speed,\n    offset,\n    rotationSpeed,\n    textureMap,\n  },\n}) {\n  const planetRef = React.useRef();\n  const texture = useLoader(THREE.TextureLoader, textureMap);\n  useFrame(({ clock }) => {\n    const t = clock.getElapsedTime() * speed + offset;\n    const x = xRadius * Math.sin(t);\n    const z = zRadius * Math.cos(t);\n    planetRef.current.position.x = x;\n    planetRef.current.position.z = z;\n    planetRef.current.rotation.y += rotationSpeed;\n  });\n\n  return (\n    <>\n      <mesh ref={planetRef}>\n        <sphereGeometry args={[size, 32, 32]} />\n        <meshStandardMaterial map={texture} />\n      </mesh>\n      <Ecliptic xRadius={xRadius} zRadius={zRadius} />\n    </>\n  );\n}\n\nfunction Lights() {\n  return (\n    <>\n      <ambientLight />\n      <pointLight position={[0, 0, 0]} />\n    </>\n  );\n}\n\n// function Ecliptic({ xRadius = 1, zRadius = 1 }) {\n//   const points = [];\n//   for (let index = 0; index < 64; index++) {\n//     const angle = (index / 64) * 2 * Math.PI;\n//     const x = xRadius * Math.cos(angle);\n//     const z = zRadius * Math.sin(angle);\n//     points.push(new THREE.Vector3(x, 0, z));\n//   }\n\n//   points.push(points[0]);\n\n//   const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n//   return (\n//     <line geometry={lineGeometry}>\n//       <lineBasicMaterial attach=\"material\" color=\"#BFBBDA\" linewidth={10} />\n//     </line>\n//   );\n// }\n\nfunction Ecliptic({ xRadius = 1, zRadius = 1 }) {\n  // Using only one radius parameter for a circle\n  const points = [];\n  for (let index = 0; index < 64; index++) {\n    const angle = (index / 64) * 2 * Math.PI;\n    const x = xRadius * Math.cos(angle); // Use xRadius for both x and z\n    const z = zRadius * Math.sin(angle); // Use xRadius for both x and z\n    points.push(new THREE.Vector3(x, 0, z));\n  }\n\n  points.push(points[0]); // Close the loop\n\n  const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);\n  return (\n    <line geometry={lineGeometry}>\n      <lineBasicMaterial attach=\"material\" color=\"#393e46\" linewidth={10} />\n    </line>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
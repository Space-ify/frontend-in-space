import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { useRef, useState, useLayoutEffect, createElement } from 'react';
import { Box3, Vector3, Sphere } from 'three';
import { useThree } from '@react-three/fiber';
import { Environment } from './Environment.js';
import { ContactShadows } from './ContactShadows.js';

const presets = {
  rembrandt: {
    main: [1, 2, 1],
    fill: [-2, -0.5, -2]
  },
  portrait: {
    main: [-1, 2, 0.5],
    fill: [-1, 0.5, -1.5]
  },
  upfront: {
    main: [0, 2, 1],
    fill: [-1, 0.5, -1.5]
  },
  soft: {
    main: [-2, 4, 4],
    fill: [-1, 0.5, -1.5]
  }
};
function Stage(_ref) {
  let {
    children,
    controls,
    shadows = true,
    adjustCamera = true,
    environment = 'city',
    contactShadow = true,
    intensity = 1,
    preset = 'rembrandt'
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "controls", "shadows", "adjustCamera", "environment", "contactShadow", "intensity", "preset"]);

  const config = presets[preset];
  const camera = useThree(state => state.camera);
  const outer = useRef(null);
  const inner = useRef(null);
  const [{
    radius,
    width,
    height
  }, set] = useState({
    radius: 0,
    width: 0,
    height: 0
  });
  useLayoutEffect(() => {
    outer.current.position.set(0, 0, 0);
    outer.current.updateWorldMatrix(true, true);
    const box3 = new Box3().setFromObject(inner.current);
    const center = new Vector3();
    const sphere = new Sphere();
    const height = box3.max.y - box3.min.y;
    const width = box3.max.x - box3.min.x;
    box3.getCenter(center);
    box3.getBoundingSphere(sphere);
    set({
      radius: sphere.radius,
      width,
      height
    });
    outer.current.position.set(-center.x, -center.y + height / 2, -center.z);
  }, [children]);
  useLayoutEffect(() => {
    if (adjustCamera) {
      const y = radius / (height > width ? 1.5 : 2.5);
      camera.position.set(0, radius * 0.5, radius * 2.5);
      camera.near = 0.1;
      camera.far = Math.max(5000, radius * 4);
      camera.lookAt(0, y, 0);

      if (controls && controls.current) {
        controls.current.target.set(0, y, 0);
        controls.current.update();
      }
    }
  }, [radius, height, width, adjustCamera]);
  return /*#__PURE__*/createElement("group", props, /*#__PURE__*/createElement("group", {
    ref: outer
  }, /*#__PURE__*/createElement("group", {
    ref: inner
  }, children)), contactShadow && /*#__PURE__*/createElement(ContactShadows, {
    "rotation-x": Math.PI / 2,
    opacity: 0.5,
    width: radius * 2,
    height: radius * 2,
    blur: 2,
    far: radius / 2
  }), environment && /*#__PURE__*/createElement(Environment, {
    preset: environment
  }), /*#__PURE__*/createElement("ambientLight", {
    intensity: intensity / 3
  }), /*#__PURE__*/createElement("spotLight", {
    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],
    intensity: intensity * 2,
    castShadow: shadows
  }), /*#__PURE__*/createElement("pointLight", {
    position: [config.fill[0] * radius, config.fill[1] * radius, config.fill[2] * radius],
    intensity: intensity
  }));
}

export { Stage };
